How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area is basically the "stage" that comes after the working directory, in that it is the transition stage to making a commit. You first start with some files on the hard drive in a folder you created, which is considered the "working directory". From there, you add some or all of the files in the working directory to the staging area to prepare for the production of the commit.

How can you use the staging area to make sure you have one commit per logical change?
You can easily check the diff between the working directory and the staging area by using the command git diff, which compares the two. Then, once you know that only one logical change was made, you can run git commit to finalize your commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches would be definitely helpful in times of making a "branch" or variation to your project. For instance, if you had an app that had one main functionality, but you wanted to introduce another function, you might use a branch to avoid changing the "master" or main branch. Branches would help not only keeping your history organized by allowing for seperate variation projects, but also by keeping one main variation unchanged throughout the project.

How do the diagrams help you visualize the branch structure?
The diagrams clearly show the flow of commits that come off from branches as they are created. It also shows how creating a commit from an existing, previous commit creates a new commit that is branch-less.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The result of merging two branches together is the final result of the components of both branaches. This means, that any new files introduced after the initial branch from either the master or the branch would be implemented in the final version. The diagram shows how two branches may possibly combine later in a merge. It shows how each independent commit comes together to form a final version of the code.

What are the pros and cons of Git's automatic merging vs. always doing merges manually? 
Git's automatic merging has its pros of autonomously determining where the merged code should be placed. The downside is that sometimes the merge may happen in a way you did not intend. Doing the merged manually allows for the user to completely be in control of how the merge is commenced. This way, there will be a much lower chance of error later on.